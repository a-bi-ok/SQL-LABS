DROP TABLE Package;
DROP TABLE Shipping_Type;
DROP TABLE Mailing_Address;
DROP TABLE State;
DROP TABLE Cus_Transaction;
DROP TABLE Customer;
DROP TABLE Product_Shipment;
DROP TABLE Seller;
DROP TABLE Product;
DROP TABLE Inventory;
DROP TABLE Product_Category;

-- 1
CREATE TABLE Product_Category(
category_ID DECIMAL(12) NOT NULL,
category_name VARCHAR(64),
quantity DECIMAL(12),
description VARCHAR(255),
PRIMARY KEY (CATEGORY_ID));
			 
INSERT INTO Product_Category VALUES(1001,'Amazon Device Accessories',40, 'Amazon Device Accessories');
INSERT INTO Product_Category VALUES(1002,'Amazon Kindle',40, 'Amazon Kindle');
INSERT INTO Product_Category VALUES(1003,'Automotive & Powersports',40, 'Automotive & Powersports');
INSERT INTO Product_Category VALUES(1004,'Baby Products',40, 'Baby Products');
INSERT INTO Product_Category VALUES(1005,'Beauty',40, 'Beauty');
INSERT INTO Product_Category VALUES(1006,'Books',40, 'Books');			 
INSERT INTO Product_Category VALUES(1007,'Camera & Photo',40, 'Camera & Photo');
INSERT INTO Product_Category VALUES(1008,'Cell Phones & Accessories',40, 'Cell Phones & Accessories');
INSERT INTO Product_Category VALUES(1009,'Collectible Coins',40, 'Collectible Coins');
INSERT INTO Product_Category VALUES(1010,'Consumer Electronics',40, 'Consumer Electronics');
INSERT INTO Product_Category VALUES(1011,'Entertainment Collectibles',40, 'Entertainment Collectibles');
INSERT INTO Product_Category VALUES(1012,'Fine Art',40, 'Fine Art');
INSERT INTO Product_Category VALUES(1013,'Grocery & Gourmet Food',40, 'Grocery & Gourmet Food');
INSERT INTO Product_Category VALUES(1014,'Health & Personal Care',40, 'Health & Personal Care');
INSERT INTO Product_Category VALUES(1015,'Home & Garden',40, 'Home & Garden');
INSERT INTO Product_Category VALUES(1016,'Independent Design',40, 'Independent Design');
INSERT INTO Product_Category VALUES(1017,'Industrial & Scientific',40, 'Industrial & Scientific');
INSERT INTO Product_Category VALUES(1018,'Kindle & Amazon Fire TV Accessories',40, 'Kindle & Amazon Fire TV Accessories');
INSERT INTO Product_Category VALUES(1019,'Major Appliances',40, 'Major Appliances');
INSERT INTO Product_Category VALUES(1020,'Music',40, 'Music');
INSERT INTO Product_Category VALUES(1021,'Musical Instruments',40, 'Musical Instruments');
INSERT INTO Product_Category VALUES(1022,'Office Products',40, 'Office Products');
INSERT INTO Product_Category VALUES(1023,'Outdoors',40, 'Outdoors');
INSERT INTO Product_Category VALUES(1024,'Personal Computers',40, 'Personal Computers');			 
INSERT INTO Product_Category VALUES(1025,'Pet Supplies',40, 'Pet Supplies');			 
INSERT INTO Product_Category VALUES(1026,'Software',40, 'Software');			 
INSERT INTO Product_Category VALUES(1027,'Sports',40, 'Sports');			 
INSERT INTO Product_Category VALUES(1028,'Sports Collectibles',40, 'Sports Collectibles');			 
INSERT INTO Product_Category VALUES(1029,'Tools & Home Improvement',40, 'Tools & Home Improvement');			 
INSERT INTO Product_Category VALUES(1030,'Toys & Games',40, 'Toys & Games');			 
INSERT INTO Product_Category VALUES(1031,'Video, DVD & Blu-ray',40, 'Video, DVD & Blu-ray');			
INSERT INTO Product_Category VALUES(1032,'Video Games',40, 'Video Games');			
INSERT INTO Product_Category VALUES(1033,'Watches',40, 'Watches');			

-- 2
CREATE TABLE Inventory(
inventory_ID DECIMAL(12) NOT NULL,
category_ID DECIMAL(12) NOT NULL,
inventory_name VARCHAR(64),
inventory_quantity DECIMAL(12),
description VARCHAR(255),
FOREIGN KEY (CATEGORY_ID) REFERENCES Product_Category,
PRIMARY KEY (INVENTORY_ID));
			 
-- 3
CREATE TABLE Product(
product_ID DECIMAL(12) NOT NULL,
category_ID DECIMAL(12) NOT NULL,
name VARCHAR(64),
description VARCHAR(255),
product_condition VARCHAR(12),
FOREIGN KEY (CATEGORY_ID) REFERENCES Product_Category,
PRIMARY KEY (PRODUCT_ID));

-- 4
CREATE TABLE Seller(
seller_ID DECIMAL(12) NOT NULL,
seller_first VARCHAR(64),
seller_last VARCHAR(64),
company_name VARCHAR(64),
seller_location VARCHAR(12),
PRIMARY KEY (SELLER_ID));
			 
INSERT INTO Seller VALUES(50001, 'Jewel', 'Smith', 'Sapp Electronics', 'Seattle');
INSERT INTO Seller VALUES(50002, 'Tim', 'Tapp', 'Tapp Computers', 'London');
			 

-- 5
CREATE TABLE Merchandize(
merchandize_id DECIMAL(12) NOT NULL,
seller_id DECIMAL(12) NOT NULL,
product_id DECIMAL(12) NOT NULL,
unit_price DECIMAL(19,2),
quantity_shipped DECIMAL(12),
FOREIGN KEY (PRODUCT_ID) REFERENCES Product,
FOREIGN KEY (SELLER_ID) REFERENCES Seller,
PRIMARY KEY (PRODUCT_ID, SELLER_ID));
			 
			 
INSERT INTO Merchandize VALUES(1,50001, 99.99, 200);
INSERT INTO Merchandize VALUES(2,50001, 29.99, 200);

			 
-- 6
CREATE TABLE Customer(
customer_ID DECIMAL(12) NOT NULL,
customer_first VARCHAR(64),
customer_last VARCHAR(64),
dob DATE NOT NULL,
customer_email VARCHAR(64),
customer_gender VARCHAR(12),
PRIMARY KEY (CUSTOMER_ID));

INSERT INTO Customer 
			 VALUES(1101, 'Jewel', 'Smith',  CAST('14-JUN-1980' AS DATE), 'jsmith@mail.com','F');
INSERT INTO Customer 
			 VALUES(1102, 'Pamela', 'Farr',  CAST('20-JAN-1975' AS DATE), 'pfarr@mail.com','F');
INSERT INTO Customer 
			 VALUES(1103, 'Tim', 'Abiok',  CAST('14-SEP-1984' AS DATE), 'tabiok@mail.com','M');
INSERT INTO Customer 
			 VALUES(1104, 'Matt', 'Baggot',  CAST('04-JUN-1985' AS DATE), 'mbaggot@mail.com','M');
INSERT INTO Customer 
			 VALUES(1105, 'Thomas', 'Wells',  CAST('14-JUN-1980' AS DATE), 'twells@mail.com','M')


-- 7			 
CREATE TABLE Cus_Transaction (
transaction_id DECIMAL(12) NOT NULL,
product_id DECIMAL(12) NOT NULL,
customer_id DECIMAL(12) NOT NULL,
line_price DECIMAL(12,2),
transaction_quantity DECIMAL(12),
transaction_stamp TIMESTAMP NOT NULL,
line_total DECIMAL(12,2)
PRIMARY KEY (TRANSACTION_ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES Product,
FOREIGN KEY (CUSTOMER_ID) REFERENCES Customer);
			 
-- 8
CREATE TABLE State (
state_id DECIMAL(12) NOT NULL,
state_name VARCHAR(64),
abbreviation VARCHAR(12)
PRIMARY KEY (STATE_ID));

			 		 		 
-- 9			 
CREATE TABLE Mailing_Address (
address_id DECIMAL(12) NOT NULL,
customer_id DECIMAL(12) NOT NULL,
street1 VARCHAR(64),
street2 VARCHAR(64),
city VARCHAR(12),
state_id DECIMAL(12) NOT NULL,
postal_code VARCHAR(12),
PRIMARY KEY (ADDRESS_ID),
FOREIGN KEY (CUSTOMER_ID) REFERENCES Customer
FOREIGN KEY (STATE_ID) REFERENCES State);
		 

-- 10			 
CREATE TABLE Shipping_Type (
shipping_type_id DECIMAL(12) NOT NULL,
Shipping_type VARCHAR(64),
shipping_cost DECIMAL(19,2),
num_days_to_delivery VARCHAR(64),
PRIMARY KEY (SHIPPING_TYPE_ID));

-- 11
CREATE TABLE Package (
package_id DECIMAL(12) NOT NULL,
transaction_id DECIMAL(12) NOT NULL,
shipping_type_id DECIMAL(12) NOT NULL,
item_count DECIMAL(12),
dimensions VARCHAR(12),
weight DECIMAL(12),
shipping_date DATE  NOT NULL,
delivery_date DATE  NOT NULL,
FOREIGN KEY (ORDER_ID) REFERENCES Customer_Order,
FOREIGN KEY (SHIPPING_TYPE_ID) REFERENCES Shipping_Type,
PRIMARY KEY (PACKAGE_ID));
										  
COMMIT;
		
DROP TABLE line_item; 											  
SELECT * FROM Customer;	
SELECT * FROM Customer_Order;
SELECT * FROM Item;	
SELECT * FROM Line_Item;
											  		  
-- TABLE VERIFICATION											  											  
SELECT * FROM Customer;	

			 
--GENERIC STORED PROCEDURE											  
CREATE OR REPLACE FUNCTION ADD_PRODUCT(product_id_arg IN DECIMAL,category_id_arg IN DECIMAL, 
   name_arg IN VARCHAR,description_arg IN VARCHAR,product_condition_arg IN VARCHAR)
   RETURNS VOID LANGUAGE plpgsql
AS
$resuableproc$ 
BEGIN
	 INSERT INTO Product 
			 VALUES(product_id_arg,category_id_arg,name_arg,description_arg,product_condition_arg);
END;
$resuableproc$;
		 			 
DROP FUNCTION ADD_PRODUCT(decimal,decimal,varchar,varchar,varchar);
			 
DO
$$
BEGIN
EXECUTE ADD_PRODUCT(1, 1007, 'Self Driving Cam', 'A self‐driving video camera which automatically
follows a subject that is being recorded', 'new');
EXECUTE ADD_PRODUCT(2, 1024, 'Holographic Keyboard', 'A keyboard that emits a
three‐dimensional projection of a keyboard', 'new');
END; $$	
			 

DELETE FROM Product;			 			 
SELECT * FROM Product;			 
SELECT * FROM Product_Shipment;	
			 
			 		 
SELECT Product.product_id, Product.name, Product_Shipment.unit_price
 FROM Product_Shipment
 JOIN Product ON Product_Shipment.product_id = Product.product_id
 JOIN Product_category ON Product_category.category_id = Product.category_id
 GROUP BY Product.product_id, Product.name, Product_Shipment.unit_price
 HAVING (Product_Shipment.unit_price) < 30	
 ORDER BY product_id

								 								 
-- SELECT * FROM Customer;								 
-- DELETE FROM Customer
-- WHERE customer_id = 11;											  
											  									 															 
-- ROW DEELETE REUSEABLE FUNCTION(METHOD)								 
CREATE OR REPLACE FUNCTION DELETE_CUSTOMER(cus_id_arg IN DECIMAL) 
   RETURNS VOID LANGUAGE plpgsql
AS 
$resuableproc$ 
BEGIN
	DELETE FROM Line_item
        WHERE order_id IN (SELECT order_id
                   FROM Customer_order
                   WHERE customer_id = cus_id_arg);									 								 
END;
$resuableproc$; -- closes the $$ quotation for the block
								 	 
DO
$$
  BEGIN
   EXECUTE DELETE_CUSTOMER(1);
END; $$		
								 
-- TRIGGERS TRIGGERS
-- 	 INSERT INTO Product_Shipment VALUES(OLD.product_id, OLD.seller_id, OLD.unit_price, OLD.quantity_shipped);
-- 	 ELSIF EXISTS (SELECT 1 FROM PRODUCT WHERE product_id = product_id_arg) THEN
-- 	 INSERT INTO Product_Shipment VALUES(OLD.product_id, OLD.seller_id, OLD.unit_price, OLD.quantity_shipped); 		 
CREATE OR REPLACE FUNCTION no_neg_cust_bal_func()
 RETURNS TRIGGER LANGUAGE plpgsql AS $trigfunc$
 BEGIN
   RAISE EXCEPTION USING MESSAGE = 'Customer balance cannot be negitive.', ERRCODE = 22000;							
 END;
 $trigfunc$;
			 											  						  
CREATE TRIGGER no_neg_cust_bal_trg
      BEFORE UPDATE OR INSERT ON customer
      FOR EACH ROW WHEN(new.customer_total < 0)
								 
															 
      EXECUTE PROCEDURE no_neg_cust_bal_func();											  
											  
DO
$$
BEGIN
EXECUTE ADD_CUSTOMER(11, 'Tim', 'Abiok', -99.99);
END; $$	

CREATE OR REPLACE FUNCTION no_glass_cust_last_func()
 RETURNS TRIGGER LANGUAGE plpgsql AS $trigfunc$
 BEGIN
   RAISE EXCEPTION USING MESSAGE = 'Patrons with the last name of Glass are not permitted as customers.', 
   ERRCODE = 42602;							
 END;
 $trigfunc$;
			 											  						  
CREATE TRIGGER no_glass_cust_last_trig
      BEFORE UPDATE OR INSERT ON customer
      FOR EACH ROW WHEN(new.customer_last = 'Glass')							 
      EXECUTE PROCEDURE no_glass_cust_last_func();											  
											  
DO
$$
BEGIN
EXECUTE ADD_CUSTOMER(11, 'Tim', 'Glass', 99.99);
END; $$									 

CREATE TABLE Item_Price_History(
item_id DECIMAL(10) NOT NULL,
description VARCHAR(30),
price DECIMAL(10),
stamp TIMESTAMP NOT NULL,             
PRIMARY KEY (ITEM_ID, STAMP),
FOREIGN KEY (ITEM_ID) REFERENCES item);

CREATE OR REPLACE FUNCTION price_hist() RETURNS TRIGGER AS $price_hist$
    BEGIN  
        -- Create a row in ITEM_PRICE_HISTORY to reflect any changes in ITEM price.
        IF (TG_OP = 'UPDATE') THEN
            INSERT INTO Item_Price_History VALUES(OLD.item_id, OLD.description, OLD.price, now());
            RETURN OLD;
        END IF;
    END;
$price_hist$ LANGUAGE plpgsql;

CREATE TRIGGER price_hist
AFTER INSERT OR UPDATE OR DELETE ON Item
    FOR EACH ROW EXECUTE PROCEDURE price_hist();
												  
UPDATE Item
SET price = 11
WHERE description = 'Plate';												  

UPDATE Item
SET price = 4
WHERE description = 'Spoon';													  

DROP TRIGGER price_hist ON Item;												  
												  
SELECT * FROM Item_Price_History;												  
SELECT * FROM Item;												  


